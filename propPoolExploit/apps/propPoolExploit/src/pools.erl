-module(pools).
-behaviour(gen_server).
-export([start_link/0,code_change/3,handle_call/3,handle_cast/2,handle_info/2,init/1,terminate/2,
	 location/1,
	 read/0]).
-record(pool, {location, header_height, block_height, time}).
-define(REFRESH, 3000).%How often in miliseconds to update data from the mining pools.
location(P) -> P#pool.location.

init(ok) -> {ok, {#pool{location = "http://176.9.84.75:8080"},
		  #pool{location = "http://159.65.120.84:8080"}}}.
start_link() -> gen_server:start_link({local, ?MODULE}, ?MODULE, ok, []).
code_change(_OldVsn, State, _Extra) -> {ok, State}.
terminate(_, _) -> io:format("died!"), ok.
handle_info(_, X) -> {noreply, X}.
handle_cast({write, D}, _) -> {noreply, D};
handle_cast(_, X) -> {noreply, X}.
handle_call(height, _From, X) -> 
    {Height, X2} = height_internal(tuple_to_list(X), 0),
    {reply, Height, X2};
handle_call(_, _From, X) -> {reply, X, X}.

read() -> gen_server:call(?MODULE, read).
write(D) -> gen_server:call(?MODULE, {write, D}).
height() -> gen_server:call(?MODULE, height).

height_internal([], N) -> N;
height_internal([H|T], N) ->
    X = if
	H#pool.header_height == H#pool.block_height ->
	    max(N, H#pool.header_height);
	true -> N
    end,
    height_internal(T, X).
    
